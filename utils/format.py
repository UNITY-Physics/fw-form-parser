from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import cm
from reportlab.pdfgen import canvas
from reportlab.platypus import SimpleDocTemplate, Paragraph, PageTemplate, Frame
from reportlab.lib.utils import ImageReader
from PIL import Image



import datetime

def generate_on_page(user,project_label):
    """Returns a function that can be used as a custom onPage callback."""
    def on_page(canvas, doc):
        page_width, page_height = A4
        border_margin = 20

        # Draw a border
        canvas.setLineWidth(2)
        canvas.setStrokeColorRGB(188/255, 84/255, 44/255)
        canvas.rect(border_margin, border_margin,
                    page_width - 2 * border_margin, page_height - 2 * border_margin)

        # Title
        canvas.setFont("Helvetica-Bold", 16)
        canvas.setFillColorRGB(188/255, 84/255, 44/255)
        canvas.drawCentredString(page_width / 2, page_height - 40, "QC Report")

        # Sub-title
        canvas.setFont("Helvetica", 14)
        canvas.setFillColorRGB(110/255, 110/255, 110/255)
        canvas.drawCentredString(page_width / 2, page_height - 60, "Project Overview")

        # # Sub-title 
        canvas.setFont("Helvetica-Bold", 14)
        canvas.setFillColorRGB(0,0,0)
        canvas.drawCentredString(page_width / 2, page_height - 100, project_label)

        #logo_path =  "/flywheel/v0/utils/logo.jpg"
        #with Image.open(logo_path) as img:
            #orig_width, orig_height = img.size

        #max_width = 100
        #max_height = 100
        #scale_factor = min(max_width / orig_width, max_height / orig_height)
        #image_width = orig_width * scale_factor
        #image_height = orig_height * scale_factor

        # Calculate the position for the top-right corner
        #x_position = page_width - image_width - 35  # 20px margin from the right
        #y_position = page_height - image_height - 65  # 20px margin from the top

        # Draw the image
        #canvas.drawImage(logo_path, x_position, y_position, width=image_width, height=image_height)

        # Timestamp and User Details
        # timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        # canvas.setFont("Helvetica", 9)
        
        # canvas.setFillColorRGB(79/255, 79/255, 79/255)
        # canvas.drawString(page_height * cm, page_height * cm, "Generated By:")
        # canvas.drawString(page_height * cm, page_height * cm - 1.5 * cm, user)  # Uses the user from main.py
        # canvas.drawString(page_height * cm, page_height * cm - 1 * cm, timestamp)

    return on_page  # Returns the function that will be used by SimpleDocTemplate

def generate_end_page(user,project_label,header=False):
    """Returns a function that can be used as a custom onPage callback."""
    def on_page(canvas, doc):
        page_width, page_height = A4
        border_margin = 20
        padding = 15
        y_top = page_height - border_margin - padding

        # Draw a border
        canvas.setLineWidth(2)
        canvas.setStrokeColorRGB(188/255, 84/255, 44/255)
        canvas.rect(border_margin, border_margin,
                    page_width - 2 * border_margin, page_height - 2 * border_margin)

       
        logo_path =  "/flywheel/v0/utils/logo.jpg"
        with Image.open(logo_path) as img:
            orig_width, orig_height = img.size

        max_width = 100
        max_height = 100
        scale_factor = min(max_width / orig_width, max_height / orig_height)
        image_width = orig_width * scale_factor
        image_height = orig_height * scale_factor

        # Calculate the position for the top-right corner
        x_logo = page_width - image_width - border_margin - padding
        y_logo = y_top - image_height + 9

        # Draw the image
        canvas.drawImage(logo_path, x_logo, y_logo, width=image_width, height=image_height)

        # Timestamp and User Details
        if header:
            x = border_margin + padding
        
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            canvas.setFont("Helvetica", 9)
            canvas.setFillColorRGB(79/255, 79/255, 79/255)
            canvas.drawString(x, y_top, "Generated By:")
            canvas.drawString(x, y_top - 14, user)
            canvas.drawString(x, y_top - 28, timestamp)

    return on_page  # Returns the function that will be used by SimpleDocTemplate



def beautify_report(pdf, user=None, logo=True, header=False, footer=False) :

    page_width, page_height = A4
    logo_path = "/flywheel/v0/utils/logo.jpg"

    border_margin = 20  # Space between the border and the page edges

    # Draw a rectangle for the border
    pdf.setLineWidth(2)  # Border thickness
    pdf.setStrokeColorRGB(188/255,84/255,44/255)    #(0.2, 0.4, 0.6)  # Border color (RGB values)
    pdf.rect(
        border_margin,  # x-coordinate (left)
        border_margin,  # y-coordinate (bottom)
        page_width - 2 * border_margin,  # width of the rectangle
        page_height - 2 * border_margin,  # height of the rectangle
        stroke=1,  # Enable stroke (border line)
        fill=0    # Disable fill (no solid color inside)
    )

    if header:
        header_y = page_height - 50 
        # Add text between the border lines (header text)
        # Add the header text
        header_text_y = header_y + 10  # Place the text between the border and line
        pdf.setFillColorRGB(79/255, 79/255, 79/255)  # dark grey
        pdf.drawCentredString(page_width / 2, header_text_y, "QC Report - Project Overview")    

    if footer:
        # Timestamp and User Details
        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        canvas.setFont("Helvetica", 9)
        canvas.setFillColorRGB(79/255, 79/255, 79/255)
        canvas.drawString(2 * cm, 2 * cm, "Generated By:")
        canvas.drawString(2 * cm, 1.5 * cm, user)  # Uses the user from main.py
        canvas.drawString(2 * cm, 1 * cm, timestamp)

    # Add horizontal line (e.g., under header)
    header_y = page_height - 50
    pdf.setLineWidth(1)
    pdf.setStrokeColorRGB(0, 0, 0)  # Black line
    pdf.line(
        border_margin,  # Start x
        header_y,       # Start y
        page_width - border_margin,  # End x
        header_y        # End y
    )

    
    if logo:
        # Define the desired size for the image (e.g., 100x100 pixels)
        with Image.open(logo_path) as img:
            orig_width, orig_height = img.size

        max_width = 100
        max_height = 100
        scale_factor = min(max_width / orig_width, max_height / orig_height)
        image_width = orig_width * scale_factor
        image_height = orig_height * scale_factor

        # Calculate the position for the top-right corner
        # (page_width - image_width) ensures it's aligned to the right
        x_position = page_width - image_width - 35  # 20px margin from the right
        y_position = page_height - image_height - 75  # 20px margin from the top

        # Draw the image
        pdf.drawImage(logo_path, x_position, y_position , width=image_width, height=image_height)


    return pdf


# Original beautify_report for custom drawing (can be reused)
# def beautify_report(pdf, canvas, page_width=None, page_height=None, logo=True, header=False):
#     # Default to A4 page size if not passed
#     if page_width is None or page_height is None:
#         page_width, page_height = A4

#     border_margin = 20  # Space between the border and the page edges

#     # Draw a rectangle for the border
#     canvas.setLineWidth(2)
#     canvas.setStrokeColorRGB(188/255, 84/255, 44/255)  # Border color (RGB values)
#     canvas.rect(
#         border_margin,  # x-coordinate (left)
#         border_margin,  # y-coordinate (bottom)
#         page_width - 2 * border_margin,  # width of the rectangle
#         page_height - 2 * border_margin,  # height of the rectangle
#         stroke=1,  # Enable stroke (border line)
#         fill=0  # Disable fill (no solid color inside)
#     )

#     if header:
#         header_y = page_height - 50
#         # Add the header text
#         header_text_y = header_y + 10  # Place the text between the border and line
#         canvas.setFillColorRGB(79/255, 79/255, 79/255)  # dark grey
#         canvas.drawCentredString(page_width / 2, header_text_y, "QC Report - Project Overview")

#     # Add horizontal line (e.g., under header)
#     header_y = page_height - 50
#     canvas.setLineWidth(1)
#     canvas.setStrokeColorRGB(0, 0, 0)  # Black line
#     canvas.line(
#         border_margin,  # Start x
#         header_y,       # Start y
#         page_width - border_margin,  # End x
#         header_y        # End y
#     )

#     if logo:
#         # Define the desired size for the image (e.g., 100x100 pixels)
#         logo_path =  "/flywheel/v0/utils/logo.jpg" #"/Users/Hajer/unity/fw-gears/fw-form-parser/utils/logo.jpg"
#         with Image.open(logo_path) as img:
#             orig_width, orig_height = img.size

#         max_width = 100
#         max_height = 100
#         scale_factor = min(max_width / orig_width, max_height / orig_height)
#         image_width = orig_width * scale_factor
#         image_height = orig_height * scale_factor

#         # Calculate the position for the top-right corner
#         x_position = page_width - image_width - 35  # 20px margin from the right
#         y_position = page_height - image_height - 65  # 20px margin from the top

#         # Draw the image
#         canvas.drawImage(logo_path, x_position, y_position, width=image_width, height=image_height)


# # Main function to combine both parts
# def generate_pdf(project_description):
#     # Create document
#     pdf_filename = 'cover_page.pdf'
#     doc = SimpleDocTemplate(pdf_filename, pagesize=A4)

#     # Prepare the content (flowable elements)
#     stylesheet = getSampleStyleSheet()
#     stylesheet.add(ParagraphStyle(name='Paragraph', spaceAfter=20))
#     elements = []
#     elements.append(Paragraph(project_description, stylesheet['Paragraph']))

#     # Define a frame for the content to flow into
#     page_width, page_height = A4
#     margin = 40
#     frame = Frame(margin, -60, page_width - 2 * margin, page_height - 2 * margin, id='normal')

#     # Define the PageTemplate with the custom "beautify_report" function for adding logo/border
#     template = PageTemplate(
#         id='CustomPage',
#         frames=[frame],  # Add the frame to handle flowable content
#         onPage=lambda canvas, doc: beautify_report(doc, canvas, page_width, page_height, logo=True, header=True)
#     )

#     # Build the document
#     doc.addPageTemplates([template])
#     doc.build(elements)



def scale_image(image_path, max_width, max_height, dpi=200):
    """
    Scales an image to fit within a given max width and height, maintaining aspect ratio.
    Returns the scaled width, height in points (1 point = 1/72 inch), and an ImageReader.
    """
    image = Image.open(image_path)
    image_width, image_height = image.size

    # Convert pixels to points (1 point = 1/72 inch)
    image_width_in_points = image_width * 72 / dpi
    image_height_in_points = image_height * 72 / dpi
    
    # Scale the image to fit within the max dimensions
    scale_width = max_width / image_width_in_points
    scale_height = max_height / image_height_in_points
    scale_factor = min(scale_width, scale_height)  # Maintain aspect ratio
    
    # Calculate scaled dimensions
    scaled_width = image_width_in_points * scale_factor
    scaled_height = image_height_in_points * scale_factor

    return scaled_width, scaled_height



# Function to simplify acquisition labels
def simplify_label(label):
    # Initialize empty result
    result = []
    
    # Check for orientation
    if 'AXI' in label.upper():
        result.append('AXI')
    elif 'COR' in label.upper():
        result.append('COR')
    elif 'SAG' in label.upper():
        result.append('SAG')
        
    # Check for T1/T2
    if 'T1' in label.upper():
        result.append('T1')
    elif 'T2' in label.upper():
        result.append('T2')
        
    # Return combined result or original label if no matches
    return '_'.join(result) if result else label

